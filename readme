myShell用户手册

I) 命令提示符
myshell运行之后，将会显示命令提示符。它包括用户名、主机名、当前工作路径，普通用户以$结尾，root用户以#结尾，用户输入的命令将显示在$或#之后

II) 常用命令
1. 内部命令，这些命令被构建在shell之中。内部命令的执行速度非常快，这是因为执行这些命令无需创建其他进程。myShell支持的内部命令有：
cd <directory>  ——把当前工作目录改变为<directory>。如果没有<directory>参数，则显示当前目录。如该目录不存在，会出现错误信息
clr  ——清屏
dir <directory>  ——列出目录<directory>的内容
environ  ——列出所有的环境变量
echo <comment>  ——在屏幕上显示<comment>并换行（多个空格和制表符会被缩减为一个空格）
help  ——显示用户手册，并且可使用 more 命令过滤
quit  ——退出shell

2. 外部命令，这些命令并没有被构建在shell中，shell 会创建一个子进程，由子进程进行程序调用执行这个程序。常用的外部命令有：
ls <directory>  ——查看文件与目录，常用参数有
-l ：以长列表形式列出文件，包含文件的属性与权限数据等  
-a ：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来  
-d ：仅列出目录本身，而不是列出目录的文件数据
pwd  ——显示当前工作目录
cat  ——查看文本文件的内容
cp  ——复制文件，它还可以把多个文件一次性地复制到一个目录下，它的常用参数有
-a ：将文件的特性一起复制  
-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份  
-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行  
-r ：递归复制，用于目录的复制行为
mv  ——移动文件、目录或更名（即移动到同一目录下）
-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖  
-i ：若目标文件已经存在，就会询问是否覆盖  
-u ：若目标文件已经存在，且比目标文件新，才会更新
rm  ——删除文件或目录
-f ：强制删除，忽略不存在的文件，不会出现警告消息  
-i ：互动模式，在删除前会询问用户是否操作  
-r ：递归删除，最常用于目录删除，它是一个非常危险的参数
mkdir  ——创建一个目录
rmdir  ——删除一个空目录，若非空则需用 rm -r
ps  ——将当前的进程运行情况选取下来并输出，常用参数有
-A ：所有的进程均显示出来  
-a ：不与terminal有关的所有进程  
-u ：有效用户的相关进程  
-x ：一般与a参数一起使用，可列出较完整的信息  
-l ：较长、较详细地将PID的信息列出

III) 环境变量
环境变量在运行shell的时候得到，myshell共有5个环境变量
SHELL：可执行程序myshell 的完整路径
USER：当前用户名
HOME： 当前用户的主目录
PWD： 当前工作目录
PARENT：父进程的执行路径
用内部命令environ可查看所有环境变量，且内部命令cd可改变环境变量PWD的值

III) 后台程序执行
正常情况下命令都是在前台执行的，在一条命令执行完之前不会有新的命令行提示符出现，只有在该命令完成之后命令行提示符才会出现，用户才能输入下一条命令。
若在命令后加空格再加上&，则可将该程序调入后台执行。该进程的PID号显示出来之后就会显示新的命令行提示符，用户不必等到后台程序执行完就能输入新的命令。
当后台程序执行完后，终端会显示该进程的PID号并指出该命令已执行完毕。

IV) I/O重定向
所有命令无非是执行一条或者多条下列的操作：输入、处理和输出。
默认的输入文件为Standard Input (stdin)，默认输出文件Standard Output (stdout)，默认的错误输出文件为Standard Error (stderr)。
一般来说，标准输入与键盘相关（即用户键入），标准输出和标准错误与显示屏相关（即一般在屏幕上显示）
在Linux中，命令的输入、输出和错误信息可以利用文件的重定向功能重定向到其他文件。

1. 输入重定向
输入重定向用 < 符号表示，语法command < inputfile
则命令的输入来自inputfile而不是键盘
2. 输出重定向
输出重定向用 > 符号表示，语法command > outputfile
则命令的输出送到文件outputfile而不是显示器
3. 输出重定向和输入重定向的合并
command < inputfile > output-file
则命令从inputfile读取输入而不是键盘，输出结果送到outputfile而不是屏幕
4. 不覆盖文件内容的重定向(追加append)
默认情况下，输出重定向会覆盖目标文件的内容（若文件不存在会创建一个）如果需要在文件的末尾追加输出结果而不是覆盖它，那么只要将 > 操作符换成 >> 操作符即可。

V) 管道
myshell允许一条命令的标准输出成为另外一条命令的标准输入，通过管道实现。管道可结合I/O重定向，一条有效的命令格式如下：
command1 [[parameter1_1] ... [parameter1_n]] [<</< file1] [>>/> file2] | command2 [parameter2_1] ... [parameter2_n] [&]
需注意，当输出重定向 >>/> 和管道符 | 同时出现时，command1的输出只会重定向至file2，这样之后才执行command2。另外，无论是否出现command2，&只对command1有效，且必须与前一个可选项中有一个空格

VI) 执行文件中的命令
myshell能够从文件中提取命令行输入，例如shell 使用以下命令行被调用：
myshell batchfile时，这个批处理文件应该包含一组命令集，这些命令将被一一执行。
当到达文件结尾时shell 退出。如果shell 被调用时没有使用参数，它会在屏幕上显示提示符等待用户输入。
